// *** TOGGLE TO CHECK ALL ROWS (TRUE) OR ONLY NOT DONE (FALSE) ***
const checkAll = true;

// In your CStoCalendar.gs file (below onOpen() and before/in checkStatusAndCreateEvents())
// Helper function to convert column letter to index (1-based)
function letterToColumnIndex(letter) {
  let column = 0, i, len;
  for (i = 0, len = letter.length; i < len; i++) {
    column = (column * 26) + (letter.charCodeAt(i) - 64);
  }
  return column;
}

function checkStatusAndCreateEvents() {
  // *** SPECIFY THE EVENT ID COLUMN HERE ***
  const EVENT_ID_COLUMN_LETTER = "O";
  const EVENT_ID_COLUMN_INDEX = letterToColumnIndex(EVENT_ID_COLUMN_LETTER); // 1-based index

  // *** SPECIFY THE "DONE" CHECKBOX COLUMN HERE  ***
  const PRESENTATION_DONE_COLUMN_LETTER = "L";
  const PRESENTATION_DONE_COLUMN_INDEX = letterToColumnIndex(PRESENTATION_DONE_COLUMN_LETTER); // 1-based index

  const SHEET_NAME = 'ðŸ’¡CS funnel tracking';
  const CALENDAR_ID = "aBunchOfNumbers@group.calendar.google.com"; // Replace with your Calendar ID

  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sheet = ss.getSheetByName(SHEET_NAME);
  if (!sheet) {
    console.error(`Sheet '${SHEET_NAME}' not found.`);
    return;
  }

  const lastColumn = sheet.getLastColumn();
  const data = sheet.getRange(1, 1, sheet.getLastRow(), Math.max(lastColumn, Math.max(EVENT_ID_COLUMN_INDEX, PRESENTATION_DONE_COLUMN_INDEX))).getValues(); // Include relevant columns
  const calendar = CalendarApp.getCalendarById(CALENDAR_ID);
  if (!calendar) {
    console.error(`Calendar with ID '${CALENDAR_ID}' not found.`);
    return;
  }

  // Start from the second row (assuming headers in the first row)
  for (let i = 1; i < data.length; i++) {
    const row = data[i];
    const statusColumnIndex = 8; // Column I (0-based index 8)
    const locationColumnIndex = 10; // Column K (0-based index 10)
    const location = row[locationColumnIndex] ? row[locationColumnIndex].toString().trim() : '';
    const eventId = row[EVENT_ID_COLUMN_INDEX - 1]; // Get Event ID from the specified column (adjust to 0-based)
    const presentationDone = row[PRESENTATION_DONE_COLUMN_INDEX - 1]; // Get status from the "Done" checkbox column (adjust to 0-based)

    // Apply filter based on checkAll flag
    if (!checkAll && presentationDone === true) {
      console.log(`Skipping row ${i + 1} because presentation is marked as done.`);
      continue;
    }

    if (row[statusColumnIndex] && row[statusColumnIndex].toString().toLowerCase() === 'positive answer') {
      const title = row[7] + " CS"; // Column H (0-based index 7)
      const professor = row[1];   // Column B (0-based index 1)
      const department = row[2];  // Column C (0-based index 2)
      const course = row[3];      // Column D (0-based index 3)
      const year = row[5];        // Column F (0-based index 5)
      const dateTimeValue = row[9]; // Get the value from Column J (0-based index 9)

      let dateTimeString;
      if (dateTimeValue instanceof Date) {
        const formattedDate = Utilities.formatDate(dateTimeValue, ss.getSpreadsheetTimeZone(), 'dd.MM.yyyy');
        let formattedTime = Utilities.formatDate(dateTimeValue, ss.getSpreadsheetTimeZone(), 'HH:mm');
        dateTimeString = `${formattedDate} ${formattedTime}`;
      } else if (typeof dateTimeValue === 'string' && dateTimeValue.trim() !== "") {
        dateTimeString = dateTimeValue;
      } else {
        console.warn(`Date/Time missing or invalid in row ${i + 1}, cannot create event.`);
        continue;
      }

      if (dateTimeString) {
        try {
          let datePart = null;
          let timePart = null;

          const parts = dateTimeString.split(' ');
          if (parts.length === 2) {
            datePart = parts[0];
            timePart = parts[1];
          } else if (parts.length === 1) {
            if (parts[0].includes(':') || parts[0].includes('.')) {
              timePart = parts[0];
              const today = new Date();
              datePart = `${today.getDate().toString().padStart(2, '0')}.${(today.getMonth() + 1).toString().padStart(2, '0')}.${today.getFullYear()}`;
            } else if (parts[0].includes('.') || parts[0].includes('/')) {
              datePart = parts[0];
              timePart = '00:00';
            }
          }

          if (datePart) {
            const dateSeparators = ['.', '/'];
            let dateParts = null;
            for (const sep of dateSeparators) {
              if (datePart.includes(sep)) {
                dateParts = datePart.split(sep);
                break;
              }
            }

            let yearNum = new Date().getFullYear();
            let month = 0;
            let day = 0;

            if (dateParts && dateParts.length >= 2) {
              day = parseInt(dateParts[0], 10) || 1;
              month = parseInt(dateParts[1], 10) - 1 || 0;
              if (dateParts.length === 3) {
                yearNum = parseInt(dateParts[2], 10) || yearNum;
              } else if (dateParts.length === 2) {
                yearNum = new Date().getFullYear();
              }
            }

            let hour = 0;
            let minute = 0;
            let second = 0;

            if (timePart) {
              const timeSeparators = [':', '.'];
              let timeParts = null;
              for (const sep of timeSeparators) {
                if (timePart.includes(sep)) {
                  timeParts = timePart.split(sep);
                  break;
                }
              }
              if (timeParts && timeParts.length >= 2) {
                hour = parseInt(timeParts[0], 10) || 0;
                minute = parseInt(timeParts[1], 10) || 0;
                second = parseInt(timeParts[2], 10) || 0;
              }
            }

            if (day > 0 && month >= 0) {
              const startDateTime = new Date(yearNum, month, day, hour, minute, second);
              const endDateTime = new Date(startDateTime.getTime() + 30 * 60 * 1000);
              const description = `${department} ${year} year, ${course} course in the class of prof. ${professor}`;
              const eventOptions = { description: description };
              if (location) {
                eventOptions.location = location;
              }

              let event;
              let updateOccurred = false;
              if (eventId) {
                try {
                  event = calendar.getEventById(eventId);
                  if (event) {
                    const oldTitle = event.getTitle();
                    const oldDescription = event.getDescription();
                    const oldStartTime = event.getStartTime();
                    const oldEndTime = event.getEndTime();
                    const oldLocation = event.getLocation();

                    if (title !== oldTitle || description !== oldDescription || startDateTime.getTime() !== oldStartTime.getTime() || endDateTime.getTime() !== oldEndTime.getTime() || location !== oldLocation) {
                      event.setTitle(title);
                      event.setDescription(description);
                      event.setTime(startDateTime, endDateTime);
                      if (location !== oldLocation) {
                        event.setLocation(location);
                      }
                      console.log(`Event updated for row ${i + 1}: ${title} - ${eventId}`);
                      updateOccurred = true;
                    } else {
                      console.log(`No changes detected for event in row ${i + 1}: ${title} - ${eventId}`);
                    }
                  } else {
                    console.log(`Event with ID ${eventId} not found in calendar, creating new.`);
                    event = calendar.createEvent(title, startDateTime, endDateTime, eventOptions);
                    sheet.getRange(i + 1, EVENT_ID_COLUMN_INDEX).setValue(event.getId()); // Use 1-based index for setRange
                    console.log(`Calendar event created for row ${i + 1}: ${title} - ${event.getId()}`);
                  }
                } catch (e) {
                  console.warn(`Error getting event with ID ${eventId}: ${e}. Creating new event.`);
                  event = calendar.createEvent(title, startDateTime, endDateTime, eventOptions);
                  sheet.getRange(i + 1, EVENT_ID_COLUMN_INDEX).setValue(event.getId()); // Use 1-based index for setRange
                  console.log(`Calendar event created for row ${i + 1} after error: ${title} - ${event.getId()}`);
                }
              } else {
                // No Event ID in the sheet, create a new event
                const existingEvents = calendar.getEvents(startDateTime, endDateTime, { search: title });
                if (existingEvents.length > 0) {
                  console.log(`Duplicate event(s) found for row ${i + 1}: ${title} at ${startDateTime}, not creating new.`);
                } else {
                  event = calendar.createEvent(title, startDateTime, endDateTime, eventOptions);
                  sheet.getRange(i + 1, EVENT_ID_COLUMN_INDEX).setValue(event.getId()); // Use 1-based index for setRange
                  console.log(`Calendar event created for row ${i + 1}: ${title} - ${event.getId()}`);
                }
              }
            } else {
              console.warn(`Invalid Date format in row ${i + 1}: ${dateTimeString}`);
            }
          } else {
            console.warn(`Date information missing or invalid in row ${i + 1}: ${dateTimeString}`);
          }
        } catch (error) {
          console.error(`Error processing row ${i + 1}: ${error}`);
        }
      } else {
        console.warn(`Date/Time missing or invalid in row ${i + 1}, cannot create event.`);
      }
    }
  }
}

